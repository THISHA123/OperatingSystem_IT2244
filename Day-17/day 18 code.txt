1=>
------------------------------------------------------------------------------
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    printf("Starting...\n");
	
	printf("Sleeping for 3 seconds!\n");
    sleep(3);  // Pause for 3 seconds
	
    printf("Exiting the program.\n");
	exit(0); // clean exit
	

    return 0;
}

[2021ict113@fedora ~]$ vi day6c1.c
[2021ict113@fedora ~]$ gcc day6c1.c -o day6c1
[2021ict113@fedora ~]$ ./day6c1
Starting...
Sleeping for 3 seconds!
Exiting the program.

2=>
------------------------------------------------------------------------------

#include <stdio.h>
#include <unistd.h>  // for fork(), sleep()
#include <stdlib.h>  // for exit()
#include <sys/wait.h> // for wait()

int main() {
    pid_t pid;

    printf("Parent process Starting... PID: %d\n", getpid());

    pid = fork();  // create a new child process

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child process
        printf("Child process, PID: %d, sleeping for 2 seconds...\n", getpid());
        sleep(2);
        printf("Child process exiting.\n");
        exit(0);  // Child exits with status 0
    } else {
        // Parent process
        int status;
        printf("Parent waiting for child to finish...\n");
        wait(&status);  // Wait for child to finish
        
        if (WIFEXITED(status)) {
            printf("Child exited with status: %d\n", WEXITSTATUS(status));
			//WEXITSTATUS(status) gets the actual exit code (0 here).
        } else {
            printf("Child did not exit normally.\n");
        }
        printf("Parent process ending.\n");
    }

    return 0;
}


[2021ict113@fedora ~]$ vi day6c2.c
[2021ict113@fedora ~]$ gcc day6c2.c -o day6c2
[2021ict113@fedora ~]$ ./day6c2
Parent process Starting... PID: 10010
Parent waiting for child to finish...
Child process, PID: 10011, sleeping for 2 seconds...
Child process exiting.
Child exited with status: 0
Parent process ending.


------------------------------------------------------------------------------

Exercise 01:

First child: Slept for 1 second.
Second child: Slept for 3 seconds.
Parent: Both children have finished.
------------------------------------------------------------------------------

3=>
------------------------------------------------------------------------------
#include <stdio.h>
#include <unistd.h>  // for fork(), sleep()
#include <stdlib.h>  // for exit()
#include <sys/wait.h> // for wait()

int main() {
    pid_t child1, child2;

    printf("Parent process starting... PID: %d\n", getpid());

    child1 = fork();  // First child process

    if (child1 == 0) {
        // First child process
        printf("First child (PID: %d) sleeping for 1 second...\n", getpid());
        sleep(1);
        printf("First child finished.\n");
        exit(0);  // Exit child process
    } 
    
    child2 = fork();  // Second child process
    
    if (child2 == 0) {
        // Second child process
        printf("Second child (PID: %d) sleeping for 3 seco nds...\n", getpid());
        sleep(3);
        printf("Second child finished.\n");
        exit(0);  // Exit child process
    }

    // Parent process waits for both children
    wait(NULL);
    wait(NULL);

    printf("Parent process: Both children have finished.\n");

    return 0;
}

[2021ict113@fedora ~]$ vi day6c3.c
[2021ict113@fedora ~]$ gcc day6c3.c -o day6c3
[2021ict113@fedora ~]$ ./day6c3
Parent process starting... PID: 12523
First child (PID: 12524) sleeping for 1 second...
Second child (PID: 12525) sleeping for 3 seconds...
First child finished.
Second child finished.
Parent process: Both children have finished.

------------------------------------------------------------------------------

Exercise 02:

First child: sleeps for 2 seconds, exits status 2.
Second child: sleeps for 1 second, exits with status 1.
Parent :waits twice, and prints which child (by PID or exit code)
Finished first and second.

------------------------------------------------------------------------------
4=>
------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>  // For exit()
#include <unistd.h>  // For fork(), sleep()
#include <sys/wait.h> // For wait()

int main() {
    pid_t child1, child2;
    int status;

    printf("Parent process starting... PID: %d\n", getpid());

    child1 = fork();  // Create first child

    if (child1 == 0) {
        // First child process
        printf("First child (PID: %d) sleeping for 2 seconds...\n", getpid());
        sleep(2);
        printf("First child finished.\n");
        exit(2);  // Exit with status 2
    }

    child2 = fork();  // Create second child

    if (child2 == 0) {
        // Second child process
        printf("Second child (PID: %d) sleeping for 1 second...\n", getpid());
        sleep(1);
        printf("Second child finished.\n");
        exit(1);  // Exit with status 1
    }

    // Parent process waits for both children and prints exit details
    pid_t finished_child1 = wait(&status);
    printf("Child with PID: %d exited with status: %d\n", finished_child1, WEXITSTATUS(status));

    pid_t finished_child2 = wait(&status);
    printf("Child with PID: %d exited with status: %d\n", finished_child2, WEXITSTATUS(status));

    printf("Parent process: Both children have finished.\n");

    return 0;
}



[2021ict113@fedora ~]$ vi day6c4.c
[2021ict113@fedora ~]$ gcc day6c4.c -o day6c4
[2021ict113@fedora ~]$ ./day6c4
Parent process starting... PID: 13744
First child (PID: 13745) sleeping for 2 seconds...
Second child (PID: 13746) sleeping for 1 second...
Second child finished.
Child with PID: 13746 exited with status: 1
First child finished.
Child with PID: 13745 exited with status: 2
Parent process: Both children have finished.



------------------------------------------------------------------------------

Exercise 03:

The parent creates a child process
The child creates a grandchild process
The grandchild sleeps 2 seconds and exits with status 2.
The child 
------------------------------------------------------------------------------

